<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CleanMyMac X 强大的mac系统清理工具]]></title>
    <url>%2F2019%2F05%2F15%2FCleanMyMac%2F</url>
    <content type="text"><![CDATA[Mac OS X 系统下知名清理软件 CleanMyMac，X版本支持最新的mac 10.14系统完美兼容，好东西😆分享下 软件均来源于网络，仅供学习使用，请支持正版！ 下载地址：链接:https://pan.baidu.com/s/1ze8vTEazCnwJILKLASw_FA 密码:bq39]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一款好用的mac笔记软件Quiver]]></title>
    <url>%2F2019%2F05%2F14%2FQuiver%2F</url>
    <content type="text"><![CDATA[应用介绍Quiver 是 Mac OS X 上一款适合程序猿使用的笔记本，支持混合书写文本、代码、Markdown标记等，方便程序员记录笔记和代码片段，并提供全文搜索功能，类似印象笔记的左中右三栏布局，是一款程序猿必备的利器。 软件均来源于网络，仅供学习使用，请支持正版！ 下载地址：链接:https://pan.baidu.com/s/1Q3-zAhyHYds025_Z3qiYwg 密码:e8nc]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1.2 基础-基础结构与类型]]></title>
    <url>%2F2019%2F02%2F25%2F1.2%20%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84%E4%B8%8E%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[1、变量1.1 变量的声明var a int; 在前面加一个 var 关键字，类型后置，也可以使用 var（ a int; b string;）减少var 1.2 变量的初始化123var a int = 10 // 方式1var a = 10 // 方式2，编译器自动推导出变量的类型a := 10 // 方式3，编译器自动推导出变量的类型 := 是初始化一个变量，不能使用已经声明的变量，否则编译器报错 1.3 变量赋值 注意：Go支持多重赋值（Simultaneous Assignment） a,b = b,a 可以方便的交换两个数的值，之前的其他语言可能都需要加一个temp变量， Go 多重赋值时，变量的左值和右值按从左到右的顺序赋值。 多重赋值在 Go 语言的错误处理和函数返回值中会大量地使用。 1234567891011121314151617package mainimport "fmt"func change() (int, int) &#123; a := 100 b := 200 a , b = b , a return a,b&#125;func main() &#123; /** * 输出结果是 200 100 而不是200 200 */ fmt.Println(change())&#125; 1.4 匿名变量Go可以定义匿名变量来减少不需要的代码，例如,我只关心Value，不想打印Key的时候可以用 _ 代替变量。同理对于有多个返回值的方法，可以用 _ 代替我不想要的返回值，这样就减少了变量的定义。 123456789func test() &#123; map1 := make(map[int]int8) map1['a'] = 1 map1['b'] = 2 map1['c'] = 3 for _,value := range map1 &#123; fmt.Println(value) &#125;&#125; 2、常量3、基础类型3.1、bool3.2、数值类型3.3、string3.4、错误类型]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1.1 基础-基础结构]]></title>
    <url>%2F2019%2F02%2F24%2F1.1%20%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[1、包的概念包是结构化代码的一种方式：每个程序都由包（通常简称为pkg）的概念组成，可以使用自身的包或者从其它包中导入内容。 如同其它一些编程语言中的类库或命名空间的概念，每个 Go 文件都属于且仅属于一个包。一个包可以由许多以 .go 为扩展名的源文件组成，因此文件名和包名一般来说都是不相同的。你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。 一个应用程序可以包含不同的包，而且即使你只使用 main 包也不必把所有的代码都写在一个巨大的文件里：你可以用一些较小的文件，并且在每个文件非注释的第一行都使用 package main 来指明这些文件都属于 main 包。如果你打算编译包名不是为 main 的源文件，如 pack1，编译后产生的对象文件将会是 pack1.a 而不是可执行程序。另外要注意的是，所有的包名都应该使用小写字母。 标准库 在 Go 的安装文件里包含了一些可以直接使用的包，即标准库。在 Windows 下，标准库的位置在 Go 根目录下的子目录 pkg\windows_386 中；在 Linux 下，标准库在 Go 根目录下的子目录 pkg\linux_amd64 中（如果是安装的是 32 位，则在 linux_386 目录中）。一般情况下，标准包会存放在 $GOROOT/pkg/$GOOS_$GOARCH/ 目录下。 Go 的标准库包含了大量的包（如：fmt 和 os），但是你也可以创建自己的包。 如果想要构建一个程序，则包和包内的文件都必须以正确的顺序进行编译。包的依赖关系决定了其构建顺序。 属于同一个包的源文件必须全部被一起编译，一个包即是编译时的一个单元，因此根据惯例，每个目录都只包含一个包。 如果对一个包进行更改或重新编译，所有引用了这个包的客户端程序都必须全部重新编译。 Go 中的包模型采用了显式依赖关系的机制来达到快速编译的目的，编译器会从后缀名为 .o 的对象文件（需要且只需要这个文件）中提取传递依赖类型的信息。 如果 A.go 依赖 B.go，而 B.go 又依赖 C.go： 编译 C.go, B.go, 然后是 A.go.为了编译 A.go, 编译器读取的是 B.o 而不是 C.o.这种机制对于编译大型的项目时可以显著地提升编译速度。 每一段代码只会被编译一次 一个 Go 程序是通过 import 关键字将一组包链接在一起。 import &quot;fmt&quot; 告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数。包名被封闭在半角双引号 &quot;&quot; 中。如果你打算从已编译的包中导入并加载公开声明的方法，不需要插入已编译包的源代码。 如果需要多个包，它们可以被分别导入：12import "fmt"import "os" 或：1import "fmt"; import "os" 但是还有更短且更优雅的方法（被称为因式分解关键字，该方法同样适用于 const、var 和 type 的声明或定义）：1234import ( "fmt" "os") 它甚至还可以更短的形式，但使用 gofmt 后将会被强制换行：1import ("fmt"; "os") 当你导入多个包时，导入的顺序会按照字母排序。 如果包名不是以 . 或 / 开头，如 “fmt” 或者 “container/list”，则 Go 会在全局文件进行查找；如果包名以 ./ 开头，则 Go 会在相对目录中查找；如果包名以 / 开头（在 Windows 下也可以这样使用），则会在系统的绝对路径中查找。 导入包即等同于包含了这个包的所有的代码对象。 除了符号 _，包中所有代码对象的标识符必须是唯一的，以避免名称冲突。但是相同的标识符可以在不同的包中使用，因为可以使用包名来区分它们。 包通过下面这个被编译器强制执行的规则来决定是否将自身的代码对象暴露给外部文件： 2、可见性规则当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的 代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。 （大写字母可以使用任何 Unicode 编码的字符，比如希腊文，不仅仅是 ASCII 码中的大写字母）。 因此，在导入一个外部包后，能够且只能够访问该包中导出的对象。 假设在包 pack1 中我们有一个变量或函数叫做 Thing（以 T 开头，所以它能够被导出），那么在当前包中导入 pack1 包，Thing 就可以像面向对象语言那样使用点标记来调用：pack1.Thing（pack1 在这里是不可以省略的）。 因此包也可以作为命名空间使用，帮助避免命名冲突（名称冲突）：两个包中的同名变量的区别在于他们的包名，例如 pack1.Thing 和 pack2.Thing。 你可以通过使用包的别名来解决包名之间的名称冲突，或者说根据你的个人喜好对包名进行重新设置，如：import fm “fmt”。下面的代码展示了如何使用包的别名： 示例 4.2 alias.go1234567package mainimport fm "fmt" // alias3func main() &#123; fm.Println("hello, world")&#125; 注意事项 如果你导入了一个包却没有使用它，则会在构建程序时引发错误，如 imported and not used: os，这正是遵循了 Go 的格言：“没有不必要的代码！“。 包的分级声明和初始化 你可以在使用 import 导入包之后定义或声明 0 个或多个常量（const）、变量（var）和类型（type），这些对象的作用域都是全局的（在本包范围内），所以可以被本包中所有的函数调用（如 gotemplate.go 源文件中的 c 和 v），然后声明一个或多个函数（func）。 Go 程序的一般结构下面的程序可以被顺利编译但什么都做不了，不过这很好地展示了一个 Go 程序的首选结构。这种结构并没有被强制要求，编译器也不关心 main 函数在前还是变量的声明在前，但使用统一的结构能够在从上至下阅读 Go 代码时有更好的体验。 所有的结构将在这一章或接下来的章节中进一步地解释说明，但总体思路如下： 在完成包的 import 之后，开始对常量、变量和类型的定义或声明。如果存在 init 函数的话，则对该函数进行定义（这是一个特殊的函数，每个含有该函数的包都会首先执行这个函数）。如果当前包是 main 包，则定义 main 函数。然后定义其余的函数，首先是类型的方法，接着是按照 main 函数中先后调用的顺序来定义相关函数，如果有很多函数，则可以按照字母顺序来进行排序。示例 4.4 gotemplate.go1234567891011121314151617181920212223242526272829package mainimport ( "fmt")const c = "C"var v int = 5type T struct&#123;&#125;func init() &#123; // initialization of package&#125;func main() &#123; var a int Func1() // ... fmt.Println(a)&#125;func (t T) Method1() &#123; //...&#125;func Func1() &#123; // exported function Func1 //...&#125; 3、Go 程序的执行（程序启动）顺序如下： 按顺序导入所有被 main 包引用的其它包，然后在每个包中执行如下流程： 如果该包又导入了其它的包，则从第一步开始递归执行，但是每个包只会被导入一次。 然后以相反的顺序在每个包中初始化常量和变量，如果该包含有 init 函数的话，则调用该函数。 在完成这一切之后，main 也执行同样的过程，最后调用 main 函数开始执行程序。]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1.0 基础-环境安装]]></title>
    <url>%2F2019%2F02%2F23%2F1.0%20%E5%9F%BA%E7%A1%80-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[go下载地址 各个平台详细的安装方式可以参考 http://docscn.studygolang.com/doc/install]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>环境</tag>
      </tags>
  </entry>
</search>
